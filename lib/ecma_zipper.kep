/**
 * @fileOverview ECMAScript AST zipper.
 */
package (
    ecmaZipper)
with
    import 'neith/tree' {treeZipper},

    import 'ecma_ast/node' {Node modify}
in {

var range = \end -> {
    var a = [];
    for (var i = 0; i < end; i = i + 1)
        a[i] = i;
    return a;
};

var joinKeys = \children values ->
    children.reduce(
        \p c -> {
            p[c] = values[c];
            return p;
        },
        []);

/**
 * Create an new ECMAScript AST Zipper.
 * 
 * @param root Root of AST.
 */
ecmaZipper = (treeZipper,
    \node ->
        (!node ? [] :
            (Array.isArray(node) ?
                range(node.length) :
                node.children)),
    
    \n k -> n[k],
    
    \node _ children values ->
        (node instanceof Node ?
            modify(node, values, {}) :
            joinKeys(children, values)));

}