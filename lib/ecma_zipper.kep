/**
 * @fileOverview ECMAScript AST zipper.
 */
package (
    ecmaZipper)
with
    import 'nu-stream::gen' {range},
    import 'nu-stream::stream' {foldl from NIL},
    import 'neith::tree' {treeZipper},
    import 'ecma-ast::node' {Node modify}
in {

var buildArray = \pairs ->
    foldl(
        \p, {key value} -> {
            p[key] = value;
            return p;
        },
        [],
        pairs);

/**
 * Create an new ECMAScript AST Zipper.
 * 
 * @param root Root of AST.
 */
ecmaZipper = (treeZipper,
    \node ->
        ?node
            :?Array.isArray(node)
                :range(0, node.length)
                :from(node.children)
            :NIL,
    
    \n k -> n[k],
    
    \node pairs values ->
        ?node instanceof Node
            :modify(node, values(), {})
            :buildArray(pairs));

}